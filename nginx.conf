# ------------------------------------------------
# 1) Дефолтный блок для всех запросов, которые 
#    не совпадают с доменом sitename.com
# ------------------------------------------------
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    return 444;  # мгновенно разрываем соединение
}

server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;

    # Для корректной загрузки Nginx нужно указать 
    # любой действующий или самоподписанный сертификат.
    # Можно использовать те же файлы, что и для вашего домена.
    ssl_certificate     /etc/letsencrypt/live/sitename.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sitename.com/privkey.pem;

    return 444;
}

# ------------------------------------------------
# 2) Блок, обслуживающий ваш домен по HTTP (80)
#    и перенаправляющий на HTTPS
# ------------------------------------------------
server {
    listen 80;
    listen [::]:80;
    server_name sitename.com www.sitename.com;

    # Перенаправляем весь HTTP-трафик на HTTPS
    return 301 https://$host$request_uri;
}

# ------------------------------------------------
# 3) Блок, обслуживающий ваш домен по HTTPS (443)
# ------------------------------------------------
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name sitename.com www.sitename.com;

    # Укажите пути к сертификатам, полученным через Certbot
    ssl_certificate     /etc/letsencrypt/live/sitename.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sitename.com/privkey.pem;

    # При желании можно добавить безопасные SSL-настройки,
    # вроде ssl_protocols TLSv1.2 TLSv1.3 и т.д.

    # Прокси-проброс к вашему Flask-приложению
    location / {
        proxy_pass http://admin:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

