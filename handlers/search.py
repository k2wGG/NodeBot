# handlers/search.py

import difflib
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from db import SessionLocal
from models import Post

from handlers.utils import subscription_required

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH_QUERY = 0

# –†–µ–≥—É–ª—è—Ä–∫–∞, —á—Ç–æ–±—ã –∏–∑ —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ https://t.me/channel_username/123 –≤—ã—Ü–µ–ø–∏—Ç—å –∫–∞–Ω–∞–ª –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
_CHAT_MSG_RE = re.compile(r"https?://t\.me/(?P<chat>[^/]+)/(?P<msg_id>\d+)")

@subscription_required
async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ /search –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫¬ª.
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏ —É–±–∏—Ä–∞–µ–º ReplyKeyboard.
    """
    # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ callback_query (–Ω–∞–∂–∞—Ç–∏–µ ¬´menu_search¬ª)
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        target = q.message
    else:
        target = update.message

    await target.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SEARCH_QUERY


async def _forward_post_to_user(user_chat_id: int, post: Post, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏–∑ –ø–æ–ª—è post.link (–∏–ª–∏ –ø–æ–ª–µ–π post.channel_username –∏ post.message_id)
    –≤—ã—Ü–µ–ø–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å, –∏ –¥–µ–ª–∞–µ–º forward_message.
    """
    # –ï—Å–ª–∏ –≤ –º–æ–¥–µ–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è post.channel_username –∏ post.message_id:
    if hasattr(post, "channel_username") and hasattr(post, "message_id"):
        try:
            await context.bot.forward_message(
                chat_id=user_chat_id,
                from_chat_id=f"@{post.channel_username}",
                message_id=post.message_id
            )
        except Exception:
            # –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –≤–¥—Ä—É–≥ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ fallback
            await context.bot.send_message(
                chat_id=user_chat_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Ç —Å—Å—ã–ª–∫–∞: {post.link}"
            )
        return

    # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ post.link –≤–∏–¥–∞ "https://t.me/channel_username/msg_id"
    m = _CHAT_MSG_RE.match(post.link)
    if m:
        chat = m.group("chat")
        msg_id = int(m.group("msg_id"))
        try:
            await context.bot.forward_message(
                chat_id=user_chat_id,
                from_chat_id=f"@{chat}",
                message_id=msg_id
            )
        except Exception:
            # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É
            await context.bot.send_message(
                chat_id=user_chat_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Ç —Å—Å—ã–ª–∫–∞: {post.link}"
            )
        return

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å -- –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
    await context.bot.send_message(
        chat_id=user_chat_id,
        text=f"üî∏ {post.title}\n{post.link}"
    )


async def search_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞. –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ Post –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –≤ title.
    –ï—Å–ª–∏ –Ω–∞—à–ª–∏—Å—å exact-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã.
    –ò–Ω–∞—á–µ ‚Äì —Å—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏-–ø–æ–¥—Å–∫–∞–∑–∫–∏.
    """
    query = update.message.text.strip()
    db = SessionLocal()
    # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ (substring) —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ title, –Ω–µ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    exact_posts = (
        db.query(Post)
          .filter(Post.title.ilike(f"%{query}%"), Post.archived == False)
          .limit(5)
          .all()
    )

    user_chat_id = update.effective_chat.id

    if exact_posts:
        # –ï—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–æ—Å—å ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
        for post in exact_posts:
            await _forward_post_to_user(user_chat_id, post, context)
        db.close()
        return ConversationHandler.END

    # –ï—Å–ª–∏ exact –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚Äì —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è (unarchived) –∏ —á–µ—Ä–µ–∑ difflib –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
    all_titles = [p.title for p in db.query(Post).filter_by(archived=False).all()]
    db.close()

    close_matches = difflib.get_close_matches(query, all_titles, n=5, cutoff=0.5)
    if not close_matches:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –ø–æ—Ö–æ–∂–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞—à–ª–∏—Å—å ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ –≤–∏–¥–µ Inline-–∫–Ω–æ–ø–æ–∫
    buttons = [
        [InlineKeyboardButton(text=title, callback_data=f"search_suggest:{title}")]
        for title in close_matches
    ]
    kb = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –º–æ–∂–µ—Ç, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:",
        reply_markup=kb
    )
    return ConversationHandler.END


async def search_suggest_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É-–ø–æ–¥—Å–∫–∞–∑–∫—É ¬´search_suggest:–ù–∞–∑–≤–∞–Ω–∏–µ–ü–æ—Å—Ç–∞¬ª.
    –ë–µ—Ä—ë—Ç –∏–∑ –ë–î –ø–æ—Å—Ç –ø–æ title –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if not data.startswith("search_suggest:"):
        return ConversationHandler.END

    title = data.split(":", 1)[1]
    db = SessionLocal()
    post = db.query(Post).filter_by(title=title).first()
    db.close()

    user_chat_id = q.message.chat.id
    if post:
        await _forward_post_to_user(user_chat_id, post, context)
    else:
        await q.edit_message_text("–£–≤—ã, —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    return ConversationHandler.END


async def search_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç /cancel –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞.
    """
    # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ callback_query (—Ä–µ–¥–∫–æ), –æ—Ç–≤–µ—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        target = q.message
    else:
        target = update.message

    await target.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def get_handlers():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤, —á—Ç–æ–±—ã bot.py –º–æ–≥ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—Ç—å:
        for h in get_search_handlers(): 
            app.add_handler(h)
    """

    # Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥ /search –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ¬´üîç –ü–æ–∏—Å–∫¬ª
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("search", search_start),
            MessageHandler(filters.Regex(r"^üîç –ü–æ–∏—Å–∫$"), search_start),
            CallbackQueryHandler(search_start, pattern=r"^menu_search$")
        ],
        states={
            SEARCH_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_process)
            ]
        },
        fallbacks=[CommandHandler("cancel", search_cancel)],
        allow_reentry=True,
        per_user=True,
    )

    # CallbackQueryHandler –¥–ª—è —Ç–µ—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫, —á—Ç–æ –≤ –∫–Ω–æ–ø–∫–∞—Ö search_suggest:<title>
    suggest_cb = CallbackQueryHandler(search_suggest_callback, pattern=r"^search_suggest:")

    return [conv, suggest_cb]
