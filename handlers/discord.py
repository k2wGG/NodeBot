# handlers/discord.py
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ParseMode
from db import SessionLocal
from models import (
    User,
    DiscordChannel,
    Filter,
    DiscordAnnouncement,
    AvailableDiscordChannel,
)
from config import ADMIN_IDS
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

from handlers.utils import subscription_required

# –ú–∞–Ω—É–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
RU_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è",
}

# ‚îÄ‚îÄ‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(
    VIEW_LAST_ANNOUNCEMENTS,   # 105 ‚Äì –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ÄúDiscord-–∞–Ω–æ–Ω—Å—ã‚Äù
    ADD_CHANNEL_NAME,          # 100 ‚Äì –∂–¥—ë–º ID/—Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT_CHANNEL_FOR_UNSUB,  # 101 ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"
    SELECT_CHANNEL_FOR_FILTER, # 102 ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
    ADD_FILTER_KEYWORD,        # 103 ‚Äì –∂–¥—ë–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)
    SELECT_FILTER_FOR_DELETE   # 104 ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
) = range(100, 106)

# ‚îÄ‚îÄ‚îÄ Callback_data –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CB_ADD_CHANNEL           = "add_discord_channel"
CB_UNSUBSCRIBE_CHANNEL   = "unsubscribe_discord_channel"
CB_VIEW_MY_CHANNELS      = "view_my_channels"
CB_ADD_FILTER            = "add_discord_filter"
CB_DELETE_FILTER         = "delete_discord_filter"
CB_LATEST_ANNOUNCEMENTS  = "latest_discord_announcements"
CB_BACK_TO_START         = "back_to_start"
CB_LIST_AVAILABLE        = "list_available_discord_channels"
CB_ADD_FROM_LIST_PREFIX  = "add_from_list:"
CB_ANN_PAGE_PREFIX       = "anns_page:"  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏


def escape_md_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ MarkdownV2, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ '>' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏.
    –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: _ * [ ] ( ) ~ ` > # + - = | { } . !
    –û–¥–Ω–∞–∫–æ –º—ã –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Ä–∫–µ—Ä —Ü–∏—Ç–∞—Ç—ã '>' (–æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —á–∏—Å—Ç—ã–º).
    –ü–æ—ç—Ç–æ–º—É –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –º—ã —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–°–Å, –∞ –ø—Ä–µ—Ñ–∏–∫—Å '> ' –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ.
    """
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2, –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    specials = r"\_*\[\]()~`>#+\-=|{}\.!"
    # –§—É–Ω–∫—Ü–∏—è replaces each special char with a backslash + char
    return re.sub(rf"([{specials}])", r"\\\1", text)


@subscription_required
async def discord_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: /discord –∏–ª–∏ callback_data="menu_discord" ‚Äî
    —Ä–∏—Å—É–µ—Ç –º–µ–Ω—é —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç Conversation –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VIEW_LAST_ANNOUNCEMENTS.
    """
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        send_target = q.message
    else:
        send_target = update.message

    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=CB_ADD_CHANNEL)],
        [InlineKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", callback_data=CB_UNSUBSCRIBE_CHANNEL)],
        [InlineKeyboardButton("üìú –ú–æ–∏ –∫–∞–Ω–∞–ª—ã",             callback_data=CB_VIEW_MY_CHANNELS)],
        [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",         callback_data=CB_LIST_AVAILABLE)],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",        callback_data=CB_ADD_FILTER)],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",         callback_data=CB_DELETE_FILTER)],
        [InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–Ω—Å—ã",       callback_data=CB_LATEST_ANNOUNCEMENTS)],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",                  callback_data=CB_BACK_TO_START)],
    ]

    # –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤:
    if user_id not in ADMIN_IDS:
        keyboard = [
            [InlineKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", callback_data=CB_UNSUBSCRIBE_CHANNEL)],
            [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",            callback_data=CB_LIST_AVAILABLE)],
            [InlineKeyboardButton("üìú –ú–æ–∏ –∫–∞–Ω–∞–ª—ã",                callback_data=CB_VIEW_MY_CHANNELS)],
            [InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–Ω—Å—ã",          callback_data=CB_LATEST_ANNOUNCEMENTS)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",                     callback_data=CB_BACK_TO_START)],
        ]

    markup = InlineKeyboardMarkup(keyboard)
    await send_target.reply_text("–ú–µ–Ω—é Discord-–∞–Ω–æ–Ω—Å–æ–≤:", reply_markup=markup)
    return VIEW_LAST_ANNOUNCEMENTS


async def show_announcements(update: Update, context: ContextTypes.DEFAULT_TYPE, page_index: int = 0):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∞–Ω–æ–Ω—Å–æ–≤, —Ä–∞–∑–±–∏—Ç—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    –ö–∞–∂–¥—ã–π –∞–Ω–æ–Ω—Å –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ MarkdownV2-—Ü–∏—Ç–∞—Ç–µ ("> "), —á—Ç–æ–±—ã Telegram –æ—Ç—Ä–∏—Å–æ–≤–∞–ª
    –µ–≥–æ —Å –ª–µ–≤—ã–º –±–æ—Ä—Ç–∏–∫–æ–º –∏ —Å–µ—Ä—ã–º —Ñ–æ–Ω–æ–º.
    """
    q = update.callback_query
    if not q:
        return

    telegram_id = q.from_user.id
    db = SessionLocal()

    user_row = db.query(User).filter_by(telegram_id=telegram_id).first()
    if not user_row:
        db.close()
        return

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–Ω–æ–Ω—Å–æ–≤ (–ø–æ –¥–∞—Ç–µ DESC)
    last_five = (
        db.query(DiscordAnnouncement)
          .filter_by(user_id=user_row.id)
          .order_by(DiscordAnnouncement.created_at.desc())
          .limit(5)
          .all()
    )
    db.close()

    if not last_five:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞
        await q.edit_message_text("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–æ–Ω—Å–æ–≤ –¥–ª—è –≤–∞—Å.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–æ–Ω—Å—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    announcements = []
    for a in last_five:
        content = a.translated if a.translated else a.content
        announcements.append({
            "created_at": a.created_at,
            "content": content,
            "matched_filter": a.matched_filter
        })

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ > 300 ‚Üí –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞,
    # –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –ø–æ–¥—Ä—è–¥ –∫–æ—Ä–æ—Ç–∫–∏—Ö (‚â§ 300) –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    pages = []
    i = 0
    while i < len(announcements):
        a = announcements[i]
        if len(a["content"]) > 300:
            pages.append([a])
            i += 1
        else:
            if (i + 1 < len(announcements)) and (len(announcements[i + 1]["content"]) <= 300):
                pages.append([a, announcements[i + 1]])
                i += 2
            else:
                pages.append([a])
                i += 1

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page_index < 0:
        page_index = 0
    if page_index >= len(pages):
        page_index = len(pages) - 1

    current_page = pages[page_index]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –¥–∞—Ç–µ (–¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥)
    grouped = {}
    for ann in current_page:
        dt = ann["created_at"]
        day = dt.day
        month_ru = RU_MONTHS.get(dt.month, str(dt.month))
        year = dt.year
        date_key = f"{day} {month_ru} {year}"
        grouped.setdefault(date_key, []).append(ann)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (MarkdownV2)
    text_lines = []
    for date_str, anns_list in grouped.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã (MarkdownV2: *–¥–∞—Ç–∞*)
        date_escaped = escape_md_v2(date_str)
        text_lines.append(f"*{date_escaped}*")

        for a in anns_list:
            time_part = a["created_at"].strftime("%H:%M")
            content_raw = a["content"]
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å
            content_lines = content_raw.splitlines() or [content_raw]

            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            first_line = content_lines[0]
            first_escaped = escape_md_v2(first_line)
            time_escaped = escape_md_v2(time_part)
            text_lines.append(f"> `{time_escaped}` ¬∑ {first_escaped}")

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ —Ü–∏—Ç–∏—Ä—É–µ–º
            for extra_line in content_lines[1:]:
                extra_escaped = escape_md_v2(extra_line)
                text_lines.append(f"> {extra_escaped}")

        text_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø—ã –ø–æ –¥–∞—Ç–µ

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø—É—Å—Ç–æ–π "\n" –≤ –∫–æ–Ω—Ü–µ
    text = "\n".join(text_lines).rstrip()

    # –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ)
    keyboard = []
    nav_buttons = []
    if page_index > 0:
        prev_idx = page_index - 1
        nav_buttons.append(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CB_ANN_PAGE_PREFIX}{prev_idx}")
        )
    if page_index + 1 < len(pages):
        next_idx = page_index + 1
        nav_buttons.append(
            InlineKeyboardButton("üëâ –î–∞–ª–µ–µ", callback_data=f"{CB_ANN_PAGE_PREFIX}{next_idx}")
        )
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é Discord
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é Discord", callback_data=CB_BACK_TO_START)])
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ MarkdownV2 ‚Äî Telegram —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–∞—ë—Ç –±–ª–æ–∫-—Ü–∏—Ç–∞—Ç—É –∑–∞ ">"
    await q.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=markup
    )


async def discord_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è VIEW_LAST_ANNOUNCEMENTS.
    """
    q = update.callback_query
    await q.answer()
    data = q.data
    chat_id = q.message.chat.id

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é Discord¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == CB_BACK_TO_START:
        user_id = q.from_user.id

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=CB_ADD_CHANNEL)],
            [InlineKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", callback_data=CB_UNSUBSCRIBE_CHANNEL)],
            [InlineKeyboardButton("üìú –ú–æ–∏ –∫–∞–Ω–∞–ª—ã",             callback_data=CB_VIEW_MY_CHANNELS)],
            [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",         callback_data=CB_LIST_AVAILABLE)],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",        callback_data=CB_ADD_FILTER)],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",         callback_data=CB_DELETE_FILTER)],
            [InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–Ω—Å—ã",       callback_data=CB_LATEST_ANNOUNCEMENTS)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",                  callback_data=CB_BACK_TO_START)],
        ]
        if user_id not in ADMIN_IDS:
            keyboard = [
                [InlineKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", callback_data=CB_UNSUBSCRIBE_CHANNEL)],
                [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",            callback_data=CB_LIST_AVAILABLE)],
                [InlineKeyboardButton("üìú –ú–æ–∏ –∫–∞–Ω–∞–ª—ã",                callback_data=CB_VIEW_MY_CHANNELS)],
                [InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–Ω—Å—ã",          callback_data=CB_LATEST_ANNOUNCEMENTS)],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",                     callback_data=CB_BACK_TO_START)],
            ]

        markup = InlineKeyboardMarkup(keyboard)
        try:
            await q.edit_message_text("–ú–µ–Ω—é Discord-–∞–Ω–æ–Ω—Å–æ–≤:", reply_markup=markup)
        except Exception as e:
            # –ï—Å–ª–∏ Telegram –±—Ä–æ—Å–∏–ª ¬´Message is not modified¬ª, –∑–Ω–∞—á–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç/—Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if "Message is not modified" not in str(e):
                raise
        return VIEW_LAST_ANNOUNCEMENTS

    # –ü–æ–ª—É—á–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db = SessionLocal()
    telegram_id = q.from_user.id
    user_row = db.query(User).filter_by(telegram_id=telegram_id).first()
    if not user_row:
        user_row = User(telegram_id=telegram_id, username=q.from_user.username)
        db.add(user_row)
        db.commit()
        db.refresh(user_row)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1) ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª¬ª
    if data == CB_ADD_CHANNEL:
        if telegram_id not in ADMIN_IDS:
            await q.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.")
            db.close()
            return VIEW_LAST_ANNOUNCEMENTS

        await q.edit_message_text(
            "–®–∞–≥ 1: –ü—Ä–∏—à–ª–∏—Ç–µ ID Discord-–∫–∞–Ω–∞–ª–∞ (—á–∏—Å–ª–æ) –∏–ª–∏ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:\n"
            "https://discord.com/channels/ID_—Å–µ—Ä–≤–µ—Ä–∞/ID_–∫–∞–Ω–∞–ª–∞"
        )
        db.close()
        return ADD_CHANNEL_NAME

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2) ¬´‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π¬ª
    if data == CB_UNSUBSCRIBE_CHANNEL:
        channels = (
            db.query(DiscordChannel)
              .filter_by(user_id=user_row.id, active=True)
              .order_by(DiscordChannel.id)
              .all()
        )
        if not channels:
            db.close()
            await q.edit_message_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ Discord-–∫–∞–Ω–∞–ª—ã.")
            return VIEW_LAST_ANNOUNCEMENTS

        buttons = []
        for ch in channels:
            db2 = SessionLocal()
            adc = db2.query(AvailableDiscordChannel).filter_by(channel_id=ch.channel_id).first()
            db2.close()

            label = adc.channel_name if adc else ch.channel_id
            buttons.append([InlineKeyboardButton(label, callback_data=f"unsub_chan_{ch.id}")])

        kb_unsub = InlineKeyboardMarkup(buttons)
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=kb_unsub
        )
        db.close()
        return SELECT_CHANNEL_FOR_UNSUB

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2a) ¬´üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤¬ª
    if data == CB_LIST_AVAILABLE:
        db2 = SessionLocal()
        available = (
            db2.query(AvailableDiscordChannel)
               .filter_by(is_active=True)
               .order_by(AvailableDiscordChannel.channel_name)
               .all()
        )
        db2.close()

        if not available:
            await q.edit_message_text("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            db.close()
            return VIEW_LAST_ANNOUNCEMENTS

        buttons = [
            [InlineKeyboardButton(row.channel_name, callback_data=f"{CB_ADD_FROM_LIST_PREFIX}{row.channel_id}")]
            for row in available
        ]
        keyboard = InlineKeyboardMarkup(buttons)
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)
        db.close()
        return VIEW_LAST_ANNOUNCEMENTS

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3) ¬´add_from_list:<channel_id>¬ª
    if data.startswith(CB_ADD_FROM_LIST_PREFIX):
        channel_id = data.split(":", 1)[1]
        db_ch = SessionLocal()
        existing = db_ch.query(DiscordChannel).filter_by(
            channel_id=channel_id, active=True, user_id=user_row.id
        ).first()
        if existing:
            db_ch.close()
            await q.edit_message_text("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return VIEW_LAST_ANNOUNCEMENTS

        new_ch = DiscordChannel(
            user_id=user_row.id,
            channel_id=channel_id,
            name=f"Discord_{channel_id}",
            active=True
        )
        db_ch.add(new_ch)
        db_ch.commit()
        db_ch.close()

        await q.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}.")
        db.close()
        return VIEW_LAST_ANNOUNCEMENTS

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4) ¬´üìú –ú–æ–∏ –∫–∞–Ω–∞–ª—ã¬ª
    if data == CB_VIEW_MY_CHANNELS:
        channels = (
            db.query(DiscordChannel)
              .filter_by(user_id=user_row.id, active=True)
              .order_by(DiscordChannel.id)
              .all()
        )
        db.close()
        if not channels:
            await q.edit_message_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ Discord-–∫–∞–Ω–∞–ª—ã.")
            return VIEW_LAST_ANNOUNCEMENTS

        text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ Discord:\n"
        for ch in channels:
            db2 = SessionLocal()
            adc = db2.query(AvailableDiscordChannel).filter_by(channel_id=ch.channel_id).first()
            db2.close()

            disp = f"‚Ä¢ {adc.channel_name}" if adc else f"‚Ä¢ {ch.channel_id}"
            text += disp + "\n"

        await q.edit_message_text(text)
        return VIEW_LAST_ANNOUNCEMENTS

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 5) ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä¬ª
    if data == CB_ADD_FILTER:
        channels = (
            db.query(DiscordChannel)
              .filter_by(user_id=user_row.id, active=True)
              .order_by(DiscordChannel.id)
              .all()
        )
        if not channels:
            db.close()
            await q.edit_message_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª.")
            return VIEW_LAST_ANNOUNCEMENTS

        buttons = [
            [InlineKeyboardButton(ch.name or ch.channel_id, callback_data=f"addf_{ch.id}")]
            for ch in channels
        ]
        kb_filter = InlineKeyboardMarkup(buttons)
        await q.edit_message_text("–ö –∫–∞–∫–æ–º—É –∫–∞–Ω–∞–ª—É –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä?", reply_markup=kb_filter)
        db.close()
        return SELECT_CHANNEL_FOR_FILTER

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 6) ¬´‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä¬ª
    if data == CB_DELETE_FILTER:
        filters_ = (
            db.query(Filter)
              .filter_by(user_id=user_row.id, active=True)
              .order_by(Filter.id)
              .all()
        )
        if not filters_:
            db.close()
            await q.edit_message_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            return VIEW_LAST_ANNOUNCEMENTS

        buttons = [
            [InlineKeyboardButton(
                f"#{f.keyword} (–∫–∞–Ω–∞–ª {f.discord_channel.channel_id})",
                callback_data=f"delf_{f.id}"
            )]
            for f in filters_
        ]
        kb_delf = InlineKeyboardMarkup(buttons)
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_delf)
        db.close()
        return SELECT_FILTER_FOR_DELETE

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 7) ¬´üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–Ω—Å—ã¬ª
    if data == CB_LATEST_ANNOUNCEMENTS:
        await show_announcements(update, context, page_index=0)
        db.close()
        return VIEW_LAST_ANNOUNCEMENTS

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 8) ¬´anns_page:<page_index>¬ª ‚Äî –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
    if data.startswith(CB_ANN_PAGE_PREFIX):
        try:
            page_index = int(data.split(":", 1)[1])
        except ValueError:
            page_index = 0
        await show_announcements(update, context, page_index)
        return VIEW_LAST_ANNOUNCEMENTS

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–µ–∑–Ω–∞–∫–æ–º—ã–π callback_data ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º –º–µ–Ω—é
    db.close()
    return VIEW_LAST_ANNOUNCEMENTS


async def add_channel_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ ‚Äú‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚Äù.
    """
    raw = update.message.text.strip()
    if "/" in raw:
        channel_id = raw.rstrip("/").rsplit("/", 1)[-1]
    else:
        channel_id = raw

    db = SessionLocal()
    telegram_id = update.effective_user.id
    user_row = db.query(User).filter_by(telegram_id=telegram_id).first()
    if not user_row:
        user_row = User(telegram_id=telegram_id, username=update.effective_user.username)
        db.add(user_row)
        db.commit()
        db.refresh(user_row)

    new_ch = DiscordChannel(
        user_id=user_row.id,
        channel_id=channel_id,
        name=f"Discord_{channel_id}",
        active=True
    )
    db.add(new_ch)
    db.commit()
    db.close()

    await update.message.reply_text(
        f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ Discord-–∫–∞–Ω–∞–ª {channel_id}.\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω—Å—ã."
    )
    return ConversationHandler.END


async def select_channel_for_unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ 'unsub_chan_{id}': –ø–æ–º–µ—á–∞–µ–º DiscordChannel.active=False.
    """
    q = update.callback_query
    await q.answer()

    ch_id = int(q.data.replace("unsub_chan_", ""))
    db = SessionLocal()
    ch = db.query(DiscordChannel).filter(DiscordChannel.id == ch_id).first()
    if ch:
        ch.active = False
        db.commit()
    db.close()

    await q.edit_message_text("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ Discord-–∫–∞–Ω–∞–ª–∞.")
    return VIEW_LAST_ANNOUNCEMENTS


async def select_channel_for_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ 'addf_{id}': –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id –∫–∞–Ω–∞–ª–∞ –≤ user_data.
    """
    q = update.callback_query
    await q.answer()

    ch_id = int(q.data.replace("addf_", ""))
    context.user_data["discord_channel_id"] = ch_id

    await q.edit_message_text("–®–∞–≥ 2: –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:")
    return ADD_FILTER_KEYWORD


async def add_filter_keyword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä.
    """
    keyword = update.message.text.strip()
    ch_id = context.user_data.get("discord_channel_id")
    if ch_id is None:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    db = SessionLocal()
    ch = db.query(DiscordChannel).filter(DiscordChannel.id == ch_id).first()
    if not ch:
        db.close()
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    new_f = Filter(
        user_id=ch.user_id,
        channel_id=ch.id,
        keyword=keyword,
        active=True
    )
    db.add(new_f)
    db.commit()
    db.close()
    context.user_data.pop("discord_channel_id", None)

    await update.message.reply_text(f"‚úÖ –§–∏–ª—å—Ç—Ä ¬´{keyword}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {ch.channel_id}.")
    return ConversationHandler.END


async def select_filter_for_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ 'delf_{id}': –ø–æ–º–µ—á–∞–µ–º Filter.active=False.
    """
    q = update.callback_query
    await q.answer()

    f_id = int(q.data.replace("delf_", ""))
    db = SessionLocal()
    f = db.query(Filter).filter(Filter.id == f_id).first()
    if f:
        f.active = False
        db.commit()
    db.close()

    await q.edit_message_text("‚úÖ –§–∏–ª—å—Ç—Ä —É–¥–∞–ª—ë–Ω.")
    return VIEW_LAST_ANNOUNCEMENTS


async def discord_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§–æ–ª–±—ç–∫: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º Conversation.
    """
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END


def get_handlers():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ Handler-–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ bot.py.
    """
    return [
        ConversationHandler(
            entry_points=[
                CommandHandler("discord", discord_menu),
                CallbackQueryHandler(discord_menu, pattern=r"^menu_discord$")
            ],
            states={
                VIEW_LAST_ANNOUNCEMENTS: [
                    CallbackQueryHandler(
                        discord_menu_callback,
                        pattern=(
                            r"^("
                            + CB_ADD_CHANNEL + r"|"
                            + CB_UNSUBSCRIBE_CHANNEL + r"|"
                            + CB_LIST_AVAILABLE + r"|"
                            + CB_ADD_FROM_LIST_PREFIX + r"|"
                            + CB_VIEW_MY_CHANNELS + r"|"
                            + CB_ADD_FILTER + r"|"
                            + CB_DELETE_FILTER + r"|"
                            + CB_LATEST_ANNOUNCEMENTS + r"|"
                            + CB_ANN_PAGE_PREFIX + r"|"
                            + CB_BACK_TO_START +
                            r")"
                        ),
                    )
                ],
                ADD_CHANNEL_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, add_channel_name)
                ],
                SELECT_CHANNEL_FOR_UNSUB: [
                    CallbackQueryHandler(select_channel_for_unsubscribe, pattern=r"^unsub_chan_\d+$")
                ],
                SELECT_CHANNEL_FOR_FILTER: [
                    CallbackQueryHandler(select_channel_for_filter, pattern=r"^addf_\d+$")
                ],
                ADD_FILTER_KEYWORD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, add_filter_keyword)
                ],
                SELECT_FILTER_FOR_DELETE: [
                    CallbackQueryHandler(select_filter_for_delete, pattern=r"^delf_\d+$")
                ],
            },
            fallbacks=[CallbackQueryHandler(discord_cancel)],
            per_user=True,
            allow_reentry=True,
        )
    ]
