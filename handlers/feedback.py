# handlers/feedback.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

from models import Feedback
from db import SessionLocal

from handlers.utils import subscription_required

# ‚îÄ‚îÄ‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ‚îÄ‚îÄ‚îÄ
(
    FEEDBACK_MENU,
    FEEDBACK_TITLE,
    FEEDBACK_DESC,
    FEEDBACK_URL,
    FEEDBACK_CLOSE
) = range(5)


def build_feedback_menu():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardMarkup –¥–ª—è –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
    """
    kb = [
        [InlineKeyboardButton("üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏",   callback_data="fb_list")],
        [InlineKeyboardButton("üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="fb_new")],
        [InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data="fb_close")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",        callback_data="fb_back_to_main")],
    ]
    return InlineKeyboardMarkup(kb)

@subscription_required
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /feedback –∏–ª–∏ callback_data="menu_feedback": —Ä–∏—Å—É–µ—Ç inline-–º–µ–Ω—é ‚Äú–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å‚Äù.
    """
    markup = build_feedback_menu()
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        await q.message.edit_text(
            "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    else:
        await update.message.reply_text(
            "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    return FEEDBACK_MENU


async def feedback_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    db = SessionLocal()
    items = db.query(Feedback).filter_by(telegram_id=q.from_user.id).order_by(Feedback.created_at.desc()).all()
    db.close()

    if not items:
        await q.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=build_feedback_menu())
        return FEEDBACK_MENU

    text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for fb in items:
        text += (
            f"ID {fb.id}: {fb.title}\n"
            f"–°—Ç–∞—Ç—É—Å: {fb.status}\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {fb.progress}\n\n"
        )
    await q.message.edit_text(text, reply_markup=build_feedback_menu())
    return FEEDBACK_MENU


async def feedback_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    await q.message.edit_text("–®–∞–≥ 1/3: –ó–∞–≥–æ–ª–æ–≤–æ–∫ (1‚Äì100 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=None)
    return FEEDBACK_TITLE


async def feedback_title_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    if not (1 <= len(s) <= 100):
        return await update.message.reply_text("‚ùóÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1‚Äì100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")

    context.user_data["fb_title"] = s
    await update.message.reply_text("–®–∞–≥ 2/3: –û–ø–∏—Å–∞–Ω–∏–µ (1‚Äì500 —Å–∏–º–≤–æ–ª–æ–≤):")
    return FEEDBACK_DESC


async def feedback_desc_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = update.message.text.strip()
    if not (1 <= len(s) <= 500):
        return await update.message.reply_text("‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ 1‚Äì500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")

    context.user_data["fb_desc"] = s
    await update.message.reply_text("–®–∞–≥ 3/3: HTTPS-—Å—Å—ã–ª–∫–∞ –∏–ª–∏ ‚Äú–Ω–µ—Ç‚Äù –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    return FEEDBACK_URL


async def feedback_url_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    if raw.lower() != "–Ω–µ—Ç":
        if not raw.startswith("https://"):
            return await update.message.reply_text("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ ‚Äú–Ω–µ—Ç‚Äù:")
        context.user_data["fb_url"] = raw
    else:
        context.user_data["fb_url"] = ""

    db = SessionLocal()
    fb = Feedback(
        telegram_id=update.effective_user.id,
        title=context.user_data["fb_title"],
        description=context.user_data["fb_desc"],
        url=context.user_data["fb_url"],
        status="–ù–æ–≤–∞—è",
        progress="0%"
    )
    db.add(fb)
    db.commit()
    fb_id = fb.id
    db.close()

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! ID: {fb_id}\n–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è"
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    return await feedback_start(update, context)


async def feedback_close_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    await q.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:", reply_markup=None)
    return FEEDBACK_CLOSE


async def feedback_close_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if not txt.isdigit():
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ /cancel:")

    fb_id = int(txt)
    db = SessionLocal()
    fb = db.query(Feedback).filter(Feedback.id == fb_id).first()
    if not fb or fb.telegram_id != update.effective_user.id:
        db.close()
        return await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")

    fb.status = "–ó–∞–∫—Ä—ã—Ç–∞"
    db.commit()
    db.close()

    await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ {fb_id} –∑–∞–∫—Ä—ã—Ç–∞.")
    return await feedback_start(update, context)


async def feedback_back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–∏ callback: –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        return await feedback_start(update, context)
    # –ü—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: –ø—Ä–æ—Å—Ç–æ /cancel
    return await feedback_start(update, context)


# ‚îÄ‚îÄ‚îÄ ConversationHandler –∏ CallbackQueryHandler ‚îÄ‚îÄ‚îÄ
feedback_conv = ConversationHandler(
    entry_points=[
        CommandHandler("feedback", feedback_start),
        CallbackQueryHandler(feedback_start, pattern=r"^menu_feedback$")
    ],
    states={
        FEEDBACK_MENU: [
            CallbackQueryHandler(feedback_list,         pattern=r"^fb_list$"),
            CallbackQueryHandler(feedback_new,          pattern=r"^fb_new$"),
            CallbackQueryHandler(feedback_close_select, pattern=r"^fb_close$"),
            CallbackQueryHandler(feedback_back_to_main, pattern=r"^fb_back_to_main$"),
        ],
        FEEDBACK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_title_received)],
        FEEDBACK_DESC:  [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_desc_received)],
        FEEDBACK_URL:   [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_url_received)],
        FEEDBACK_CLOSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_close_process)],
    },
    fallbacks=[CallbackQueryHandler(feedback_back_to_main, pattern=r"^fb_back_to_main$")],
    per_user=True,
    allow_reentry=True,
)


def get_handlers():
    return [
        feedback_conv,
    ]
