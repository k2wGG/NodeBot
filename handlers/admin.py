# handlers/admin.py

from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)
from config import ADMIN_IDS
from db import SessionLocal
from models import User
import logging
from handlers.utils import subscription_required  # –∏–º–ø–æ—Ä—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
BROADCAST_TEXT = 1


def admin_required(func):
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            if update.callback_query:
                q = update.callback_query
                await q.answer()
                await q.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return ConversationHandler.END
        return await func(update, context, *args, **kwargs)
    return wrapped


@subscription_required
@admin_required
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        await q.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    else:
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    return BROADCAST_TEXT


@subscription_required
@admin_required
async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ä–∞—Å—Å—ã–ª–∞–µ–º –µ–≥–æ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    text = update.message.text
    db = SessionLocal()
    users = db.query(User).all()
    db.close()
    bot = context.bot
    failed = 0
    for u in users:
        try:
            await bot.send_message(chat_id=u.telegram_id, text=text)
        except Exception as e:
            failed += 1
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {u.telegram_id}: {e}")
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")
    return ConversationHandler.END


def get_handlers():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ handler‚Äô–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ bot.py.
    """
    return [
        ConversationHandler(
            entry_points=[CommandHandler("broadcast", broadcast_start)],
            states={
                BROADCAST_TEXT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_send)
                ]
            },
            fallbacks=[],
            per_user=True,
            allow_reentry=True,
        ),
    ]
